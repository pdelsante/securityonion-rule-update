#!/bin/bash
#
# Copyright (C) 2008-2013 Doug Burks and Security Onion <doug.burks@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# Version:
# 20130620
#
# Changelog:
#
# 20111001
# Delete backups older than X days
# Determine if running interactively or from cron
#
# 20120119
# remove the -T option to allow so_rules to work
# sensor needs to scp so_rules.rules from the master
#
# 20130613	
# Michal Purzynski noticed that we need to copy 
# /usr/local/lib/snort_dynamicrules/ from the server for
# Sourcefire SO rules.
#
# 20130617
# Chris White added the ability to do granular rule tuning
# per sensor.
#
# 20130620
# Check for root privileges.
# Create backup dirs if they don't already exist.
# Copy OSSEC HIDS rules from master to slave.

#########################################
# Got r00t?
#########################################
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "rule-update needs root privileges.  Please try again using sudo."
    exit
fi

#########################################
# Variables
#########################################

# How many days of rule backups do you want to keep?
DAYSTOKEEP_RULE_BACKUPS=30 

# Do you want to enable local tuning of NIDS rules?
# Default is false (rules are copied as-is from master server)
# Setting to true will result in the raw rules tarball(s)
# being copied from the master and then pulledpork running locally
# for additional tuning
LOCAL_NIDS_RULE_TUNING=false

# Do you want to enable local tuning of HIDS rules?
# Default is false (OSSEC local_rules.xml is copied from master server)
# Setting to true bypasses this so that you can tune local_rules.xml locally
LOCAL_HIDS_RULE_TUNING=false

# The values above can be overridden in securityonion.conf
source /etc/nsm/securityonion.conf

#########################################
# OSSEC HIDS Variables and Backups
#########################################

# OSSEC HIDS rules
HIDS=/var/ossec/rules
HIDS_RULES=$HIDS/local_rules.xml
		
# Create backup directory if it doesn't already exist
HIDS_RULES_BACK=$HIDS/backup
mkdir -p $HIDS_RULES_BACK

# Backup local_rules.xml and remove old backups
HIDS_RULES_PREV=$HIDS_RULES_BACK/local_rules.xml.`date +%Y%m%d%H%M%S`
cp $HIDS_RULES $HIDS_RULES_PREV
echo "Cleaning up local_rules.xml backup files older than $DAYSTOKEEP_RULE_BACKUPS days."
find $HIDS_RULES_BACK/local_rules.xml.* -type f -mtime +$DAYSTOKEEP_RULE_BACKUPS -exec /bin/rm -f '{}' +

#########################################
# NIDS Variables and Backups
#########################################

# NIDS rules
NIDS="/etc/nsm/rules"
NIDS_RULES_DOWNLOADED=$NIDS/downloaded.rules
NIDS_RULES_LOCAL=$NIDS/local.rules

# Create backup directory if it doesn't already exist
NIDS_RULES_BACK=$NIDS/backup
mkdir -p $NIDS_RULES_BACK

# Backup downloaded.rules and remove old backups
echo "Backing up current downloaded.rules file before it gets overwritten."
cp $NIDS_RULES_DOWNLOADED $NIDS_RULES_BACK/downloaded.rules.`date +%Y%m%d%H%M%S`
echo "Cleaning up downloaded.rules backup files older than $DAYSTOKEEP_RULE_BACKUPS days."
find $NIDS_RULES_BACK/downloaded.rules.* -type f -mtime +$DAYSTOKEEP_RULE_BACKUPS -exec /bin/rm -f '{}' +

# Backup local.rules and remove old backups
echo "Backing up current local.rules file before it gets overwritten."
cp $NIDS_RULES_LOCAL $NIDS_RULES_BACK/local.rules.`date +%Y%m%d%H%M%S`
echo "Cleaning up local.rules backup files older than $DAYSTOKEEP_RULE_BACKUPS days."
find $NIDS_RULES_BACK/local.rules.* -type f -mtime +$DAYSTOKEEP_RULE_BACKUPS -exec /bin/rm -f '{}' +

#########################################
# Is this box a master or slave?
#########################################

# Slave sensors have securityonion_ssh.conf
SSH_DIR="/root/.ssh"
SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
if [ ! -f $SSH_CONF ]; then
	# This box is a master server.

	# Copy OSSEC local_rules.xml to /tmp so that sensors can pull it
	cp /var/ossec/rules/local_rules.xml /tmp/local_rules.xml
	chmod 644 /tmp/local_rules.xml

	# Go get rules from Internet.
	echo "Running PulledPork."
	/usr/bin/pulledpork.pl -c /etc/nsm/pulledpork/pulledpork.conf
else
	# This box is a sensor.  Go get rules from master.

	KEY="$SSH_DIR/securityonion"
	source $SSH_CONF		

	# Determine if we are running interactively or from cron.
	# If running interactively, proceed without delay.
	# If running from cron, pause for 5 minutes.
	tty -s
	if [ $? -gt 0 ]; then
		echo "Sleeping for 5 minutes to allow master time to download new rules."
		sleep 5m 
	fi
	
	# Start with OSSEC HIDS rules.
        if $LOCAL_HIDS_RULE_TUNING; then
		# Don't copy OSSEC local_rules.xml from master
		# so that it can be tuned locally.
	else
		# We're changing the default behavior
		# since we're now copying OSSEC rules from master
		# to sensor (we weren't doing that originally).
		# So we need to make a local_rules_orig in case the user
		# had already customized local_rules.xml.
		HIDS_RULES_ORIG=$HIDS/local_rules_orig.xml
		if [ ! -f $HIDS_RULES_ORIG ]; then
			cp $HIDS_RULES $HIDS_RULES_ORIG
		fi

		# Copy local.rules.xml from master.
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/tmp/local_rules.xml $HIDS_RULES
		# Fix permissions.
		chown root:ossec $HIDS_RULES
		# If local_rules.xml has changed, restart OSSEC.
		diff $HIDS_RULES $HIDS_RULES_PREV >/dev/null || service ossec-hids-server restart
	fi

	# Now process NIDS rules.

	# Check if local NIDS rule tuning is enabled.
	if $LOCAL_NIDS_RULE_TUNING; then
		# Local rule tuning enabled.
		# Pull compressed rules and process slave side using pulledpork.
		# Check pulledpork conf for configured rule_url's and scp's them over.
		echo "Copying compressed rules from $SERVERNAME."
		
		MASTER_RULES=$(ssh -i "$KEY" $SSH_USERNAME@$SERVERNAME grep '^rule_url' /etc/nsm/pulledpork/pulledpork.conf | awk -F '|' '{print $2}' | sed 's/\./*\./g')
		LOCAL_RULES=$(grep '^rule_url' /etc/nsm/pulledpork/pulledpork.conf | awk -F '|' '{print $2}' | sed 's/\./*\./g')

		set -- $MASTER_RULES
		MASTER_LENGTH=${#@}
		set -- $LOCAL_RULES
		LOCAL_LENGTH=${#@}		

		# The master must be a super set of all rules.  
		# Check to ensure master rule url count is not smaller than local
		# which implies a rule_url was added to the local sensor and not the master.
		# Also warn if local has fewer rule urls than master in case 
		# a url was added upstream and not subsequently downstream.
		if [ "$MASTER_LENGTH" -lt "$LOCAL_LENGTH" ]; then
			echo "Error: Master rule_url count is less than Local rule_url count."
			echo "Master must have all rule_urls enabled in its pulledpork.conf."
		elif [ "$MASTER_LENGTH" -gt "$LOCAL_LENGTH" ]; then
			echo "Warning: Local rule_url count is less than Master rule_url count. "
			echo "Ensure this is intended."
		fi
					
		for COMPRESSED_RULE in $MASTER_RULES; do
			scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/tmp/$COMPRESSED_RULE /tmp/
		done

		# Process rules local to sensor without starting a separate download.
		echo "Running PulledPork."		
		/usr/bin/pulledpork.pl -n -c /etc/nsm/pulledpork/pulledpork.conf
	else
		#### Default ####
		# Local rule tuning disabled, pull processed rules from master.
		echo "Copying rules from $SERVERNAME."
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/downloaded.rules 	$NIDS/downloaded.rules
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/local.rules 	$NIDS/local.rules
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/so_rules.rules 	$NIDS/so_rules.rules
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/sid-msg.map 	$NIDS/sid-msg.map
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/threshold.conf 	$NIDS/threshold.conf
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:$NIDS/bpf.conf 		$NIDS/bpf.conf
		scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/usr/local/lib/snort_dynamicrules/* /usr/local/lib/snort_dynamicrules/
	fi
fi

#########################################
# Restart NIDS processes
#########################################

# If Barnyard is running, restart it
if ps aux |grep "barnyard[2]" >/dev/null; then
	echo "Restarting Barnyard2."
	/usr/sbin/nsm_sensor_ps-restart --only-barnyard2
fi

# If Snort is running, restart it
if ps aux |grep "snor[t]" >/dev/null; then
	echo "Restarting IDS Engine."
	/usr/sbin/nsm_sensor_ps-restart --only-snort-alert
fi
